spring:
  kafka:
    bootstrap-servers: 192.168.4.203:9092,192.168.4.203:9093,192.168.4.203:9094
    producer:
      # 发生错误后，消息重发的次数
      retries: 0
      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小
      buffer-memory: 33554432

      # Kafka提供的序列化和反序列化类
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式 JSON的就使用：org.springframework.kafka.support.serializer.JsonSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1

      # 启用事务
      # transaction-id-prefix: my-tx. # 事务编号前缀

      # 一些需要通过属性进行配置的项
      # properties:
      # 提交延时  当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka，linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了:
      #  linger:
      #    ms: 0

      # 自定义分区器
      #  partitioner:
      #    class: com.jack.kafka.producer.CustomizePartitioner

    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式 JSON的就使用：org.springframework.kafka.support.serializer.JsonSerializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

      # 批量消费每次最多消费多少条消息
      # max-poll-records: 50

      # 事务隔离级别
      #isolation-level: read_committed #仅读取已提交的消息

      # 一些需要通过属性进行配置的项
      # properties:
        # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
      #  session:
      #    timeout:
      #      ms: 120000
        # 消费请求超时时间
      #  request:
      #    timeout:
      #      ms: 180000
    listener:
      # 在侦听器容器中运行的线程数，用于提高并发量
      concurrency: 5
      # listener负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      # 设置批量消费
      # type: batch

  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 数据库连接地址
    url: jdbc:mysql://192.168.4.203:3306/kafka_msg?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
    # 数据库用户名
    username: root
    # 数据库连接密码
    password: nihaoma
    # 进行数据库连接池的配置
    dbcp2:
      # 数据库连接池的最小维持连接数
      min-idle: 5
      # 初始化提供的连接数
      initial-size: 5
      # 最大的连接数
      max-total: 5
      # 等待连接获取的最大超时时间
      max-wait-millis: 200
# mybatis配置
mybatis:
  config-location: classpath:mybatis-config.xml

logging:
  level:
    com.jack.kafka: debug
